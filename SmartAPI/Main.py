import MicroQuote
import threading
import time
import datetime

Str_Account = 'masterlink'
Str_Password = 'ML2856'
#   敦南機房
Str_Server_Login = '202.39.34.86:443'
Str_Server_Quote = '202.39.34.86:7777'
Str_Server_Recover = '202.39.34.86:443'
Str_Product_Info = '202.39.34.86:443'

#   交易商品代碼，如：TXFB9、TXO11000F8、2330。若為I060，則為指數代號，如：TXF。
#   若為價差商品用左斜線分隔，如：TXFD9/E9。可用符號 | 分隔取多商品，但限於同
#   一商品種類。（詳細命名規則請參考期交所網站）。若要取得股票指數，輸入TAIEX，
#   但無法與其他商品同使取報價(第二項參數為Stock)
Str_Product = ''
#   交易商品種類，共下列4 項：Future、Option、Stock、Warrant
Str_Product_Type = ''
#   報價資料種類，共下列4 項：I020、I030、I080、I060。證券與權值輸入空值
Str_Quote_Type = ''

Dic_Result_LogIn = {-3: '本程式已登入，請先執行登出', -1: '無法連線伺服器', 0: '資料庫異常',
                    1: '正常', 2: '密碼錯誤', 3: '無此帳號',
                    4: '無權限', 6: '聯絡客服人員', 7: '聯絡客服人員'}

#   -----------------------------------------------------------------------------   Class

Threads_test = []

class Thread_Order_RealTime(threading.Thread):
    def __init__(self, prod, prod_type, quote_type, thread_name=None):
        threading.Thread.__init__(self)
        self.prod = prod
        self.prod_type = prod_type
        self.quote_type = quote_type
        self.thread_stop = False
        self._stop_event = threading.Event()
        if thread_name is not None:
            self.name = thread_name

    def run(self):
        """
                data = MicroQuote.MicroQuote_Set(self.prod, self.prod_type, self.quote_type, False)

                for i in data.quote_on_notify():
                    if (self.thread_stop is True) or (i == -4):
                        break
                    print('----------------------------------------------------')
                    print("即時報價 {0}_{1}_{2} : {3}".format(self.prod, self.prod_type, self.quote_type, i))
                    time.sleep(0.01)"""

        def target_func():
            data = MicroQuote.MicroQuote_Set(self.prod, self.prod_type, self.quote_type, False)
            for i in data.quote_on_notify():
                if (self.thread_stop is True) or (i == -4):
                    break
                print('----------------------------------------------------')
                print("即時報價 {0}_{1}_{2} : {3}".format(self.prod, self.prod_type, self.quote_type, i))
                time.sleep(0.01)

        subthread = threading.Thread(target=target_func, args=())
        subthread.setDaemon(True)   # daemon的特性：父线程退出时子线程就自动退出
        subthread.start()

        while not self.thread_stop:
            subthread.join(1)

        #print('Thread stopped')

    def stop(self):
        self.thread_stop = True
        self._stop_event.set()

    def stopped(self):
        return self._stop_event.is_set()

#   -----------------------------------------------------------------------------   Function

def SmartAPI_Login():
    return MicroQuote.MicroQuote_Login(
        Str_Account, Str_Password, Str_Server_Login, Str_Server_Quote, Str_Server_Recover, Str_Product_Info)

def Set_Quote():
    global Str_Product, Str_Product_Type

    print('輸入訂閱商品 : ')
    Str_Product = input().upper()
    print('輸入訂閱商品類別  1:Future 2:Option 3:Stock 4:Warrant')
    Str_Product_Type = input()

    if Str_Product and Str_Product_Type:
        if Str_Product == 'TAIEX':
            Str_Product_Type = '3'

        s_order = {'0': Other, '1': Future, '2': Option, '3': Stock, '4': Warrant}
        s_order.get(Str_Product_Type, '0')(Str_Product)

def Get_Input_Enter():
    global Threads_test
    keystrk = input('Press Enter to Exit \n')
    # thread doesn't continue until key is pressed
    #print('You pressed: ', keystrk)
    if keystrk == '':
        for t in Threads_test:
            t.stop()
            print('Thread: {0} , Stop : {1}'.format(t.name, t.thread_stop))

def Future(prod):
    global Threads_test
    Threads_test = []
    Threads_test.append(Thread_Order_RealTime(prod, 'Future', 'I020', 'Thread_Future_I020'))
    Threads_test.append(Thread_Order_RealTime(prod, 'Future', 'I030', 'Thread_Future_I030'))
    Threads_test.append(Thread_Order_RealTime(prod, 'Future', 'I080', 'Thread_Future_I080'))
    threading.Thread(target=Get_Input_Enter).start()

    print('Future {0} Quote Start'.format(prod))
    for t in Threads_test:
        t.start()

    for t in Threads_test:
        t.join()
        print('{0} isAlive: {1}'.format(t.name, t.isAlive()))
    print('Future {0} Quote End'.format(prod))
    Set_Quote()

def Option(prod):
    global Threads_test
    Threads_test = []
    Threads_test.append(Thread_Order_RealTime(prod, 'Option', 'I020', 'Thread_Option_I020'))
    Threads_test.append(Thread_Order_RealTime(prod, 'Option', 'I030', 'Thread_Option_I030'))
    Threads_test.append(Thread_Order_RealTime(prod, 'Option', 'I080', 'Thread_Option_I080'))
    threading.Thread(target=Get_Input_Enter).start()

    print('Option {0} Quote Start'.format(prod))
    for t in Threads_test:
        t.start()

    for t in Threads_test:
        t.join()
        print('{0} isAlive: {1}'.format(t.name, t.isAlive()))
    print('Option {0} Quote End'.format(prod))
    Set_Quote()

def Stock(prod):
    global Threads_test
    Threads_test = []
    Threads_test.append(Thread_Order_RealTime(prod, 'Stock', '', 'Thread_Stock'))
    threading.Thread(target=Get_Input_Enter).start()

    print('Stock {0} Quote Start'.format(prod))
    for t in Threads_test:
        t.start()

    for t in Threads_test:
        t.join()
        print('{0} isAlive: {1}'.format(t.name, t.isAlive()))
    print('Stock {0} Quote End'.format(prod))
    Set_Quote()

def Warrant(prod):
    global Threads_test
    Threads_test = []
    Threads_test.append(Thread_Order_RealTime(prod, 'Warrant', '', 'Thread_Warrant'))
    threading.Thread(target=Get_Input_Enter).start()

    print('Warrant {0} Quote Start'.format(prod))
    for t in Threads_test:
        t.start()

    for t in Threads_test:
        t.join()
        print('{0} isAlive: {1}'.format(t.name, t.isAlive()))
    print('Warrant {0} Quote End'.format(prod))
    Set_Quote()

def Other(prod):
    print('Other {0}'.format(prod))

#   -----------------------------------------------------------------------------   Main

try:

    if __name__ == '__main__':

        print('選擇機房  1:敦南 2:板橋')
        int_mach = input()
        if int_mach == 1:
            Str_Server_Login = '202.39.34.86:443'
            Str_Server_Quote = '202.39.34.86:7777'
            Str_Server_Recover = '202.39.34.86:443'
            Str_Product_Info = '202.39.34.86:443'
        else:
            Str_Server_Login = '210.59.202.20:443'
            Str_Server_Quote = '210.59.202.20:7777'
            Str_Server_Recover = '210.59.202.20:443'
            Str_Product_Info = '210.59.202.20:443'

        result_login = SmartAPI_Login()
        print("登入: {0}".format(Dic_Result_LogIn.get(result_login, '')))

        Set_Quote()
        """"""


        """-----------------------------------------測試 Last Tick-I080-----------------------------------------"""
        """500個商品
        BRFB0|BRFC0|BRFD0|BRFF0|BRFL0|CAFA0|CAFC0|CAFF0|CAFI0|CAFL9|CBFA0|CBFC0|CBFF0|CBFI0|CBFL9|CCFA0|CCFC0|CCFF0|CCFI0|CCFL9|CDFA0|CDFC0|CDFF0|CDFI0|CDFL9|CEFA0|CEFC0|CEFF0|CEFI0|CEFL9|CFFA0|CFFC0|CFFF0|CFFI0|CFFL9|CGFA0|CGFC0|CGFF0|CGFI0|CGFL9|CHFA0|CHFC0|CHFF0|CHFI0|CHFL9|CJFA0|CJFC0|CJFF0|CJFI0|CJFL9|CK1C0|CK1F0|CK1L9|CKFA0|CKFC0|CKFF0|CKFI0|CKFL9|CLFA0|CLFC0|CLFF0|CLFI0|CLFL9|CM1F0|CM1L9|CMFA0|CMFC0|CMFF0|CMFI0|CMFL9|CNFA0|CNFC0|CNFF0|CNFI0|CNFL9|CQFA0|CQFC0|CQFF0|CQFI0|CQFL9|CRFA0|CRFC0|CRFF0|CRFI0|CRFL9|CSFA0|CSFC0|CSFF0|CSFI0|CSFL9|CU1C0|CU1F0|CU1L9|CUFA0|CUFC0|CUFF0|CUFI0|CUFL9|CWFA0|CWFC0|CWFF0|CWFI0|CWFL9|CXFA0|CXFC0|CXFF0|CXFI0|CXFL9|CYFA0|CYFC0|CYFF0|CYFI0|CYFL9|CZ1C0|CZ1F0|CZ1L9|CZFA0|CZFC0|CZFF0|CZFI0|CZFL9|DCFA0|DCFC0|DCFF0|DCFI0|DCFL9|DD1C0|DD1F0|DD1L9|DDFA0|DDFC0|DDFF0|DDFI0|DDFL9|DEFA0|DEFC0|DEFF0|DEFI0|DEFL9|DF1L9|DFFA0|DFFC0|DFFF0|DFFI0|DFFL9|DGFA0|DGFC0|DGFF0|DGFI0|DGFL9|DHFA0|DHFC0|DHFF0|DHFI0|DHFL9|DIFA0|DIFC0|DIFF0|DIFI0|DIFL9|DJFA0|DJFC0|DJFF0|DJFI0|DJFL9|DKFA0|DKFC0|DKFF0|DKFI0|DKFL9|DLFA0|DLFC0|DLFF0|DLFI0|DLFL9|DN1L9|DNFA0|DNFC0|DNFF0|DNFI0|DNFL9|DOFA0|DOFC0|DOFF0|DOFI0|DOFL9|DPFA0|DPFC0|DPFF0|DPFI0|DPFL9|DQFA0|DQFC0|DQFF0|DQFI0|DQFL9|DSFA0|DSFC0|DSFF0|DSFI0|DSFL9|DUFA0|DUFC0|DUFF0|DUFI0|DUFL9|DVFA0|DVFC0|DVFF0|DVFI0|DVFL9|DWFA0|DWFC0|DWFF0|DWFI0|DWFL9|DXFA0|DXFC0|DXFF0|DXFI0|DXFL9|DYFA0|DYFC0|DYFF0|DYFI0|DYFL9|DZ1L9|DZFA0|DZFC0|DZFF0|DZFI0|DZFL9|EEFA0|EEFC0|EEFF0|EEFI0|EEFL9|EG1L9|EGFA0|EGFC0|EGFF0|EGFI0|EGFL9|EHFA0|EHFC0|EHFF0|EHFI0|EHFL9|EMFA0|EMFC0|EMFF0|EMFI0|EMFL9|EPFA0|EPFC0|EPFF0|EPFI0|EPFL9|ERFA0|ERFC0|ERFF0|ERFI0|ERFL9|EXFA0|EXFB0|EXFC0|EXFF0|EXFI0|EXFL9|EY1F0|EYFA0|EYFC0|EYFF0|EYFI0|EYFL9|FEFA0|FEFC0|FEFF0|FEFI0|FEFL9|FFFA0|FFFC0|FFFF0|FFFI0|FFFL9|FGFA0|FGFC0|FGFF0|FGFI0|FGFL9|FKFA0|FKFC0|FKFF0|FKFI0|FKFL9|FQFA0|FQFC0|FQFF0|FQFI0|FQFL9|FRFA0|FRFC0|FRFF0|FRFI0|FRFL9|FTFA0|FTFC0|FTFF0|FTFI0|FTFL9|FVFA0|FVFC0|FVFF0|FVFI0|FVFL9|FWFA0|FWFC0|FWFF0|FWFI0|FWFL9|FXFA0|FXFB0|FXFC0|FXFF0|FXFI0|FXFL9|FYFA0|FYFC0|FYFF0|FYFI0|FYFL9|FZFA0|FZFC0|FZFF0|FZFI0|FZFL9|G2FA0|G2FB0|G2FC0|G2FF0|G2FI0|G2FL9|GAFA0|GAFC0|GAFF0|GAFI0|GAFL9|GCFA0|GCFC0|GCFF0|GCFI0|GCFL9|GDFB0|GDFD0|GDFF0|GDFH0|GDFJ0|GDFL9|GHFA0|GHFC0|GHFF0|GHFI0|GHFL9|GIFA0|GIFC0|GIFF0|GIFI0|GIFL9|GJFA0|GJFC0|GJFF0|GJFI0|GJFL9|GLFA0|GLFC0|GLFF0|GLFI0|GLFL9|GMFA0|GMFC0|GMFF0|GMFI0|GMFL9|GNFA0|GNFC0|GNFF0|GNFI0|GNFL9|GOFA0|GOFC0|GOFF0|GOFI0|GOFL9|GRFA0|GRFC0|GRFF0|GRFI0|GRFL9|GTFA0|GTFB0|GTFC0|GTFF0|GTFI0|GTFL9|GUFA0|GUFC0|GUFF0|GUFI0|GUFL9|GWFA0|GWFC0|GWFF0|GWFI0|GWFL9|GXFA0|GXFC0|GXFF0|GXFI0|GXFL9|GZFA0|GZFC0|GZFF0|GZFI0|GZFL9|HAFA0|HAFC0|HAFF0|HAFI0|HAFL9|HBFA0|HBFC0|HBFF0|HBFI0|HBFL9|HCFA0|HCFC0|HCFF0|HCFI0|HCFL9|HHFA0|HHFC0|HHFF0|HHFI0|HHFL9|HIFA0|HIFC0|HIFF0|HIFI0|HIFL9|HLFA0|HLFC0|HLFF0|HLFI0|HLFL9|HOFA0|HOFC0|HOFF0|HOFI0|HOFL9|HS1C0|HS1F0|HS1L9|HSFA0|HSFC0|HSFF0|HSFI0|HSFL9|HY1C0|HYFA0|HYFC0|HYFF0|HYFI0|HYFL9|IA1C0|IA1L9|IAFA0|IAFC0|IAFF0|IAFI0|IAFL9|IHFA0|IHFC0|IHFF0|IHFI0|IHFL9|IIFA0|IIFC0|IIFF0|IIFI0|IIFL9|IJFA0|IJFC0|IJFF0|IJFI0|IJFL9|IMFA0|IMFC0|IMFF0|IMFI0|IMFL9
        """
        """600個商品
        BRFB0|BRFC0|BRFD0|BRFF0|BRFL0|CAFA0|CAFC0|CAFF0|CAFI0|CAFL9|CBFA0|CBFC0|CBFF0|CBFI0|CBFL9|CCFA0|CCFC0|CCFF0|CCFI0|CCFL9|CDFA0|CDFC0|CDFF0|CDFI0|CDFL9|CEFA0|CEFC0|CEFF0|CEFI0|CEFL9|CFFA0|CFFC0|CFFF0|CFFI0|CFFL9|CGFA0|CGFC0|CGFF0|CGFI0|CGFL9|CHFA0|CHFC0|CHFF0|CHFI0|CHFL9|CJFA0|CJFC0|CJFF0|CJFI0|CJFL9|CK1C0|CK1F0|CK1L9|CKFA0|CKFC0|CKFF0|CKFI0|CKFL9|CLFA0|CLFC0|CLFF0|CLFI0|CLFL9|CM1F0|CM1L9|CMFA0|CMFC0|CMFF0|CMFI0|CMFL9|CNFA0|CNFC0|CNFF0|CNFI0|CNFL9|CQFA0|CQFC0|CQFF0|CQFI0|CQFL9|CRFA0|CRFC0|CRFF0|CRFI0|CRFL9|CSFA0|CSFC0|CSFF0|CSFI0|CSFL9|CU1C0|CU1F0|CU1L9|CUFA0|CUFC0|CUFF0|CUFI0|CUFL9|CWFA0|CWFC0|CWFF0|CWFI0|CWFL9|CXFA0|CXFC0|CXFF0|CXFI0|CXFL9|CYFA0|CYFC0|CYFF0|CYFI0|CYFL9|CZ1C0|CZ1F0|CZ1L9|CZFA0|CZFC0|CZFF0|CZFI0|CZFL9|DCFA0|DCFC0|DCFF0|DCFI0|DCFL9|DD1C0|DD1F0|DD1L9|DDFA0|DDFC0|DDFF0|DDFI0|DDFL9|DEFA0|DEFC0|DEFF0|DEFI0|DEFL9|DF1L9|DFFA0|DFFC0|DFFF0|DFFI0|DFFL9|DGFA0|DGFC0|DGFF0|DGFI0|DGFL9|DHFA0|DHFC0|DHFF0|DHFI0|DHFL9|DIFA0|DIFC0|DIFF0|DIFI0|DIFL9|DJFA0|DJFC0|DJFF0|DJFI0|DJFL9|DKFA0|DKFC0|DKFF0|DKFI0|DKFL9|DLFA0|DLFC0|DLFF0|DLFI0|DLFL9|DN1L9|DNFA0|DNFC0|DNFF0|DNFI0|DNFL9|DOFA0|DOFC0|DOFF0|DOFI0|DOFL9|DPFA0|DPFC0|DPFF0|DPFI0|DPFL9|DQFA0|DQFC0|DQFF0|DQFI0|DQFL9|DSFA0|DSFC0|DSFF0|DSFI0|DSFL9|DUFA0|DUFC0|DUFF0|DUFI0|DUFL9|DVFA0|DVFC0|DVFF0|DVFI0|DVFL9|DWFA0|DWFC0|DWFF0|DWFI0|DWFL9|DXFA0|DXFC0|DXFF0|DXFI0|DXFL9|DYFA0|DYFC0|DYFF0|DYFI0|DYFL9|DZ1L9|DZFA0|DZFC0|DZFF0|DZFI0|DZFL9|EEFA0|EEFC0|EEFF0|EEFI0|EEFL9|EG1L9|EGFA0|EGFC0|EGFF0|EGFI0|EGFL9|EHFA0|EHFC0|EHFF0|EHFI0|EHFL9|EMFA0|EMFC0|EMFF0|EMFI0|EMFL9|EPFA0|EPFC0|EPFF0|EPFI0|EPFL9|ERFA0|ERFC0|ERFF0|ERFI0|ERFL9|EXFA0|EXFB0|EXFC0|EXFF0|EXFI0|EXFL9|EY1F0|EYFA0|EYFC0|EYFF0|EYFI0|EYFL9|FEFA0|FEFC0|FEFF0|FEFI0|FEFL9|FFFA0|FFFC0|FFFF0|FFFI0|FFFL9|FGFA0|FGFC0|FGFF0|FGFI0|FGFL9|FKFA0|FKFC0|FKFF0|FKFI0|FKFL9|FQFA0|FQFC0|FQFF0|FQFI0|FQFL9|FRFA0|FRFC0|FRFF0|FRFI0|FRFL9|FTFA0|FTFC0|FTFF0|FTFI0|FTFL9|FVFA0|FVFC0|FVFF0|FVFI0|FVFL9|FWFA0|FWFC0|FWFF0|FWFI0|FWFL9|FXFA0|FXFB0|FXFC0|FXFF0|FXFI0|FXFL9|FYFA0|FYFC0|FYFF0|FYFI0|FYFL9|FZFA0|FZFC0|FZFF0|FZFI0|FZFL9|G2FA0|G2FB0|G2FC0|G2FF0|G2FI0|G2FL9|GAFA0|GAFC0|GAFF0|GAFI0|GAFL9|GCFA0|GCFC0|GCFF0|GCFI0|GCFL9|GDFB0|GDFD0|GDFF0|GDFH0|GDFJ0|GDFL9|GHFA0|GHFC0|GHFF0|GHFI0|GHFL9|GIFA0|GIFC0|GIFF0|GIFI0|GIFL9|GJFA0|GJFC0|GJFF0|GJFI0|GJFL9|GLFA0|GLFC0|GLFF0|GLFI0|GLFL9|GMFA0|GMFC0|GMFF0|GMFI0|GMFL9|GNFA0|GNFC0|GNFF0|GNFI0|GNFL9|GOFA0|GOFC0|GOFF0|GOFI0|GOFL9|GRFA0|GRFC0|GRFF0|GRFI0|GRFL9|GTFA0|GTFB0|GTFC0|GTFF0|GTFI0|GTFL9|GUFA0|GUFC0|GUFF0|GUFI0|GUFL9|GWFA0|GWFC0|GWFF0|GWFI0|GWFL9|GXFA0|GXFC0|GXFF0|GXFI0|GXFL9|GZFA0|GZFC0|GZFF0|GZFI0|GZFL9|HAFA0|HAFC0|HAFF0|HAFI0|HAFL9|HBFA0|HBFC0|HBFF0|HBFI0|HBFL9|HCFA0|HCFC0|HCFF0|HCFI0|HCFL9|HHFA0|HHFC0|HHFF0|HHFI0|HHFL9|HIFA0|HIFC0|HIFF0|HIFI0|HIFL9|HLFA0|HLFC0|HLFF0|HLFI0|HLFL9|HOFA0|HOFC0|HOFF0|HOFI0|HOFL9|HS1C0|HS1F0|HS1L9|HSFA0|HSFC0|HSFF0|HSFI0|HSFL9|HY1C0|HYFA0|HYFC0|HYFF0|HYFI0|HYFL9|IA1C0|IA1L9|IAFA0|IAFC0|IAFF0|IAFI0|IAFL9|IHFA0|IHFC0|IHFF0|IHFI0|IHFL9|IIFA0|IIFC0|IIFF0|IIFI0|IIFL9|IJFA0|IJFC0|IJFF0|IJFI0|IJFL9|IMFA0|IMFC0|IMFF0|IMFI0|IMFL9|IOFA0|IOFC0|IOFF0|IOFI0|IOFL9|IPFA0|IPFC0|IPFF0|IPFI0|IPFL9|IQFA0|IQFC0|IQFF0|IQFI0|IQFL9|IRFA0|IRFC0|IRFF0|IRFI0|IRFL9|ITFA0|ITFC0|ITFF0|ITFI0|ITFL9|IXFA0|IXFC0|IXFF0|IXFI0|IXFL9|IYFA0|IYFC0|IYFF0|IYFI0|IYFL9|IZFA0|IZFC0|IZFF0|IZFI0|IZFL9|JBFA0|JBFC0|JBFF0|JBFI0|JBFL9|JFFA0|JFFC0|JFFF0|JFFI0|JFFL9|JNFA0|JNFC0|JNFF0|JNFI0|JNFL9|JPFA0|JPFC0|JPFF0|JPFI0|JPFL9|JSFA0|JSFC0|JSFF0|JSFI0|JSFL9|JWFA0|JWFC0|JWFF0|JWFI0|JWFL9|JZ1L9|JZFA0|JZFC0|JZFF0|JZFI0|JZFL9|KAFA0|KAFC0|KAFF0|KAFI0|KAFL9|KBFA0|KBFC0|KBFF0|KBFI0|KBFL9|KCFA0|KCFC0|KCFF0|KCFI0|KCFL9|KDFA0|KDFC0|KDFF0|KDFI0|KDFL9|KFFA0|KFFC0|KFFF0|KFFI0
        """
        """700個商品
        BRFB0|BRFC0|BRFD0|BRFF0|BRFL0|CAFA0|CAFC0|CAFF0|CAFI0|CAFL9|CBFA0|CBFC0|CBFF0|CBFI0|CBFL9|CCFA0|CCFC0|CCFF0|CCFI0|CCFL9|CDFA0|CDFC0|CDFF0|CDFI0|CDFL9|CEFA0|CEFC0|CEFF0|CEFI0|CEFL9|CFFA0|CFFC0|CFFF0|CFFI0|CFFL9|CGFA0|CGFC0|CGFF0|CGFI0|CGFL9|CHFA0|CHFC0|CHFF0|CHFI0|CHFL9|CJFA0|CJFC0|CJFF0|CJFI0|CJFL9|CK1C0|CK1F0|CK1L9|CKFA0|CKFC0|CKFF0|CKFI0|CKFL9|CLFA0|CLFC0|CLFF0|CLFI0|CLFL9|CM1F0|CM1L9|CMFA0|CMFC0|CMFF0|CMFI0|CMFL9|CNFA0|CNFC0|CNFF0|CNFI0|CNFL9|CQFA0|CQFC0|CQFF0|CQFI0|CQFL9|CRFA0|CRFC0|CRFF0|CRFI0|CRFL9|CSFA0|CSFC0|CSFF0|CSFI0|CSFL9|CU1C0|CU1F0|CU1L9|CUFA0|CUFC0|CUFF0|CUFI0|CUFL9|CWFA0|CWFC0|CWFF0|CWFI0|CWFL9|CXFA0|CXFC0|CXFF0|CXFI0|CXFL9|CYFA0|CYFC0|CYFF0|CYFI0|CYFL9|CZ1C0|CZ1F0|CZ1L9|CZFA0|CZFC0|CZFF0|CZFI0|CZFL9|DCFA0|DCFC0|DCFF0|DCFI0|DCFL9|DD1C0|DD1F0|DD1L9|DDFA0|DDFC0|DDFF0|DDFI0|DDFL9|DEFA0|DEFC0|DEFF0|DEFI0|DEFL9|DF1L9|DFFA0|DFFC0|DFFF0|DFFI0|DFFL9|DGFA0|DGFC0|DGFF0|DGFI0|DGFL9|DHFA0|DHFC0|DHFF0|DHFI0|DHFL9|DIFA0|DIFC0|DIFF0|DIFI0|DIFL9|DJFA0|DJFC0|DJFF0|DJFI0|DJFL9|DKFA0|DKFC0|DKFF0|DKFI0|DKFL9|DLFA0|DLFC0|DLFF0|DLFI0|DLFL9|DN1L9|DNFA0|DNFC0|DNFF0|DNFI0|DNFL9|DOFA0|DOFC0|DOFF0|DOFI0|DOFL9|DPFA0|DPFC0|DPFF0|DPFI0|DPFL9|DQFA0|DQFC0|DQFF0|DQFI0|DQFL9|DSFA0|DSFC0|DSFF0|DSFI0|DSFL9|DUFA0|DUFC0|DUFF0|DUFI0|DUFL9|DVFA0|DVFC0|DVFF0|DVFI0|DVFL9|DWFA0|DWFC0|DWFF0|DWFI0|DWFL9|DXFA0|DXFC0|DXFF0|DXFI0|DXFL9|DYFA0|DYFC0|DYFF0|DYFI0|DYFL9|DZ1L9|DZFA0|DZFC0|DZFF0|DZFI0|DZFL9|EEFA0|EEFC0|EEFF0|EEFI0|EEFL9|EG1L9|EGFA0|EGFC0|EGFF0|EGFI0|EGFL9|EHFA0|EHFC0|EHFF0|EHFI0|EHFL9|EMFA0|EMFC0|EMFF0|EMFI0|EMFL9|EPFA0|EPFC0|EPFF0|EPFI0|EPFL9|ERFA0|ERFC0|ERFF0|ERFI0|ERFL9|EXFA0|EXFB0|EXFC0|EXFF0|EXFI0|EXFL9|EY1F0|EYFA0|EYFC0|EYFF0|EYFI0|EYFL9|FEFA0|FEFC0|FEFF0|FEFI0|FEFL9|FFFA0|FFFC0|FFFF0|FFFI0|FFFL9|FGFA0|FGFC0|FGFF0|FGFI0|FGFL9|FKFA0|FKFC0|FKFF0|FKFI0|FKFL9|FQFA0|FQFC0|FQFF0|FQFI0|FQFL9|FRFA0|FRFC0|FRFF0|FRFI0|FRFL9|FTFA0|FTFC0|FTFF0|FTFI0|FTFL9|FVFA0|FVFC0|FVFF0|FVFI0|FVFL9|FWFA0|FWFC0|FWFF0|FWFI0|FWFL9|FXFA0|FXFB0|FXFC0|FXFF0|FXFI0|FXFL9|FYFA0|FYFC0|FYFF0|FYFI0|FYFL9|FZFA0|FZFC0|FZFF0|FZFI0|FZFL9|G2FA0|G2FB0|G2FC0|G2FF0|G2FI0|G2FL9|GAFA0|GAFC0|GAFF0|GAFI0|GAFL9|GCFA0|GCFC0|GCFF0|GCFI0|GCFL9|GDFB0|GDFD0|GDFF0|GDFH0|GDFJ0|GDFL9|GHFA0|GHFC0|GHFF0|GHFI0|GHFL9|GIFA0|GIFC0|GIFF0|GIFI0|GIFL9|GJFA0|GJFC0|GJFF0|GJFI0|GJFL9|GLFA0|GLFC0|GLFF0|GLFI0|GLFL9|GMFA0|GMFC0|GMFF0|GMFI0|GMFL9|GNFA0|GNFC0|GNFF0|GNFI0|GNFL9|GOFA0|GOFC0|GOFF0|GOFI0|GOFL9|GRFA0|GRFC0|GRFF0|GRFI0|GRFL9|GTFA0|GTFB0|GTFC0|GTFF0|GTFI0|GTFL9|GUFA0|GUFC0|GUFF0|GUFI0|GUFL9|GWFA0|GWFC0|GWFF0|GWFI0|GWFL9|GXFA0|GXFC0|GXFF0|GXFI0|GXFL9|GZFA0|GZFC0|GZFF0|GZFI0|GZFL9|HAFA0|HAFC0|HAFF0|HAFI0|HAFL9|HBFA0|HBFC0|HBFF0|HBFI0|HBFL9|HCFA0|HCFC0|HCFF0|HCFI0|HCFL9|HHFA0|HHFC0|HHFF0|HHFI0|HHFL9|HIFA0|HIFC0|HIFF0|HIFI0|HIFL9|HLFA0|HLFC0|HLFF0|HLFI0|HLFL9|HOFA0|HOFC0|HOFF0|HOFI0|HOFL9|HS1C0|HS1F0|HS1L9|HSFA0|HSFC0|HSFF0|HSFI0|HSFL9|HY1C0|HYFA0|HYFC0|HYFF0|HYFI0|HYFL9|IA1C0|IA1L9|IAFA0|IAFC0|IAFF0|IAFI0|IAFL9|IHFA0|IHFC0|IHFF0|IHFI0|IHFL9|IIFA0|IIFC0|IIFF0|IIFI0|IIFL9|IJFA0|IJFC0|IJFF0|IJFI0|IJFL9|IMFA0|IMFC0|IMFF0|IMFI0|IMFL9|IOFA0|IOFC0|IOFF0|IOFI0|IOFL9|IPFA0|IPFC0|IPFF0|IPFI0|IPFL9|IQFA0|IQFC0|IQFF0|IQFI0|IQFL9|IRFA0|IRFC0|IRFF0|IRFI0|IRFL9|ITFA0|ITFC0|ITFF0|ITFI0|ITFL9|IXFA0|IXFC0|IXFF0|IXFI0|IXFL9|IYFA0|IYFC0|IYFF0|IYFI0|IYFL9|IZFA0|IZFC0|IZFF0|IZFI0|IZFL9|JBFA0|JBFC0|JBFF0|JBFI0|JBFL9|JFFA0|JFFC0|JFFF0|JFFI0|JFFL9|JNFA0|JNFC0|JNFF0|JNFI0|JNFL9|JPFA0|JPFC0|JPFF0|JPFI0|JPFL9|JSFA0|JSFC0|JSFF0|JSFI0|JSFL9|JWFA0|JWFC0|JWFF0|JWFI0|JWFL9|JZ1L9|JZFA0|JZFC0|JZFF0|JZFI0|JZFL9|KAFA0|KAFC0|KAFF0|KAFI0|KAFL9|KBFA0|KBFC0|KBFF0|KBFI0|KBFL9|KCFA0|KCFC0|KCFF0|KCFI0|KCFL9|KDFA0|KDFC0|KDFF0|KDFI0|KDFL9|KFFA0|KFFC0|KFFF0|KFFI0|KFFL9|KGFA0|KGFC0|KGFF0|KGFI0|KGFL9|KIFA0|KIFC0|KIFF0|KIFI0|KIFL9|KKFA0|KKFC0|KKFF0|KKFI0|KKFL9|KLFA0|KLFC0|KLFF0|KLFI0|KLFL9|KOFA0|KOFC0|KOFF0|KOFI0|KOFL9|KPFA0|KPFC0|KPFF0|KPFI0|KPFL9|KSFA0|KSFC0|KSFF0|KSFI0|KSFL9|KWFA0|KWFC0|KWFF0|KWFI0|KWFL9|LBFA0|LBFC0|LBFF0|LBFI0|LBFL9|LCFA0|LCFC0|LCFF0|LCFI0|LCFL9|LE1C0|LE1L9|LEFA0|LEFC0|LEFF0|LEFI0|LEFL9|LIFA0|LIFC0|LIFF0|LIFI0|LIFL9|LMFA0|LMFC0|LMFF0|LMFI0|LMFL9|LOFA0|LOFC0|LOFF0|LOFI0|LOFL9|LQFA0|LQFC0|LQFF0|LQFI0|LQFL9|LRFA0|LRFC0|LRFF0|LRFI0|LRFL9|LTFA0|LTFC0|LTFF0|LTFI0|LTFL9|LUFA0|LUFC0|LUFF0|LUFI0|LUFL9|LV1L9|LVFA0|LVFC0|LVFF0|LVFI0|LVFL9|LWFA0
        """
        """
        starttime = datetime.datetime.now()
        Str_Product = 'BRFB0|BRFC0|BRFD0|BRFF0|BRFL0|CAFA0|CAFC0|CAFF0|CAFI0|CAFL9|CBFA0|CBFC0|CBFF0|CBFI0|CBFL9|CCFA0|CCFC0|CCFF0|CCFI0|CCFL9|CDFA0|CDFC0|CDFF0|CDFI0|CDFL9|CEFA0|CEFC0|CEFF0|CEFI0|CEFL9|CFFA0|CFFC0|CFFF0|CFFI0|CFFL9|CGFA0|CGFC0|CGFF0|CGFI0|CGFL9|CHFA0|CHFC0|CHFF0|CHFI0|CHFL9|CJFA0|CJFC0|CJFF0|CJFI0|CJFL9|CK1C0|CK1F0|CK1L9|CKFA0|CKFC0|CKFF0|CKFI0|CKFL9|CLFA0|CLFC0|CLFF0|CLFI0|CLFL9|CM1F0|CM1L9|CMFA0|CMFC0|CMFF0|CMFI0|CMFL9|CNFA0|CNFC0|CNFF0|CNFI0|CNFL9|CQFA0|CQFC0|CQFF0|CQFI0|CQFL9|CRFA0|CRFC0|CRFF0|CRFI0|CRFL9|CSFA0|CSFC0|CSFF0|CSFI0|CSFL9|CU1C0|CU1F0|CU1L9|CUFA0|CUFC0|CUFF0|CUFI0|CUFL9|CWFA0|CWFC0|CWFF0|CWFI0|CWFL9|CXFA0|CXFC0|CXFF0|CXFI0|CXFL9|CYFA0|CYFC0|CYFF0|CYFI0|CYFL9|CZ1C0|CZ1F0|CZ1L9|CZFA0|CZFC0|CZFF0|CZFI0|CZFL9|DCFA0|DCFC0|DCFF0|DCFI0|DCFL9|DD1C0|DD1F0|DD1L9|DDFA0|DDFC0|DDFF0|DDFI0|DDFL9|DEFA0|DEFC0|DEFF0|DEFI0|DEFL9|DF1L9|DFFA0|DFFC0|DFFF0|DFFI0|DFFL9|DGFA0|DGFC0|DGFF0|DGFI0|DGFL9|DHFA0|DHFC0|DHFF0|DHFI0|DHFL9|DIFA0|DIFC0|DIFF0|DIFI0|DIFL9|DJFA0|DJFC0|DJFF0|DJFI0|DJFL9|DKFA0|DKFC0|DKFF0|DKFI0|DKFL9|DLFA0|DLFC0|DLFF0|DLFI0|DLFL9|DN1L9|DNFA0|DNFC0|DNFF0|DNFI0|DNFL9|DOFA0|DOFC0|DOFF0|DOFI0|DOFL9|DPFA0|DPFC0|DPFF0|DPFI0|DPFL9|DQFA0|DQFC0|DQFF0|DQFI0|DQFL9|DSFA0|DSFC0|DSFF0|DSFI0|DSFL9|DUFA0|DUFC0|DUFF0|DUFI0|DUFL9|DVFA0|DVFC0|DVFF0|DVFI0|DVFL9|DWFA0|DWFC0|DWFF0|DWFI0|DWFL9|DXFA0|DXFC0|DXFF0|DXFI0|DXFL9|DYFA0|DYFC0|DYFF0|DYFI0|DYFL9|DZ1L9|DZFA0|DZFC0|DZFF0|DZFI0|DZFL9|EEFA0|EEFC0|EEFF0|EEFI0|EEFL9|EG1L9|EGFA0|EGFC0|EGFF0|EGFI0|EGFL9|EHFA0|EHFC0|EHFF0|EHFI0|EHFL9|EMFA0|EMFC0|EMFF0|EMFI0|EMFL9|EPFA0|EPFC0|EPFF0|EPFI0|EPFL9|ERFA0|ERFC0|ERFF0|ERFI0|ERFL9|EXFA0|EXFB0|EXFC0|EXFF0|EXFI0|EXFL9|EY1F0|EYFA0|EYFC0|EYFF0|EYFI0|EYFL9|FEFA0|FEFC0|FEFF0|FEFI0|FEFL9|FFFA0|FFFC0|FFFF0|FFFI0|FFFL9|FGFA0|FGFC0|FGFF0|FGFI0|FGFL9|FKFA0|FKFC0|FKFF0|FKFI0|FKFL9|FQFA0|FQFC0|FQFF0|FQFI0|FQFL9|FRFA0|FRFC0|FRFF0|FRFI0|FRFL9|FTFA0|FTFC0|FTFF0|FTFI0|FTFL9|FVFA0|FVFC0|FVFF0|FVFI0|FVFL9|FWFA0|FWFC0|FWFF0|FWFI0|FWFL9|FXFA0|FXFB0|FXFC0|FXFF0|FXFI0|FXFL9|FYFA0|FYFC0|FYFF0|FYFI0|FYFL9|FZFA0|FZFC0|FZFF0|FZFI0|FZFL9|G2FA0|G2FB0|G2FC0|G2FF0|G2FI0|G2FL9|GAFA0|GAFC0|GAFF0|GAFI0|GAFL9|GCFA0|GCFC0|GCFF0|GCFI0|GCFL9|GDFB0|GDFD0|GDFF0|GDFH0|GDFJ0|GDFL9|GHFA0|GHFC0|GHFF0|GHFI0|GHFL9|GIFA0|GIFC0|GIFF0|GIFI0|GIFL9|GJFA0|GJFC0|GJFF0|GJFI0|GJFL9|GLFA0|GLFC0|GLFF0|GLFI0|GLFL9|GMFA0|GMFC0|GMFF0|GMFI0|GMFL9|GNFA0|GNFC0|GNFF0|GNFI0|GNFL9|GOFA0|GOFC0|GOFF0|GOFI0|GOFL9|GRFA0|GRFC0|GRFF0|GRFI0|GRFL9|GTFA0|GTFB0|GTFC0|GTFF0|GTFI0|GTFL9|GUFA0|GUFC0|GUFF0|GUFI0|GUFL9|GWFA0|GWFC0|GWFF0|GWFI0|GWFL9|GXFA0|GXFC0|GXFF0|GXFI0|GXFL9|GZFA0|GZFC0|GZFF0|GZFI0|GZFL9|HAFA0|HAFC0|HAFF0|HAFI0|HAFL9|HBFA0|HBFC0|HBFF0|HBFI0|HBFL9|HCFA0|HCFC0|HCFF0|HCFI0|HCFL9|HHFA0|HHFC0|HHFF0|HHFI0|HHFL9|HIFA0|HIFC0|HIFF0|HIFI0|HIFL9|HLFA0|HLFC0|HLFF0|HLFI0|HLFL9|HOFA0|HOFC0|HOFF0|HOFI0|HOFL9|HS1C0|HS1F0|HS1L9|HSFA0|HSFC0|HSFF0|HSFI0|HSFL9|HY1C0|HYFA0|HYFC0|HYFF0|HYFI0|HYFL9|IA1C0|IA1L9|IAFA0|IAFC0|IAFF0|IAFI0|IAFL9|IHFA0|IHFC0|IHFF0|IHFI0|IHFL9|IIFA0|IIFC0|IIFF0|IIFI0|IIFL9|IJFA0|IJFC0|IJFF0|IJFI0|IJFL9|IMFA0|IMFC0|IMFF0|IMFI0|IMFL9|IOFA0|IOFC0|IOFF0|IOFI0|IOFL9|IPFA0|IPFC0|IPFF0|IPFI0|IPFL9|IQFA0|IQFC0|IQFF0|IQFI0|IQFL9|IRFA0|IRFC0|IRFF0|IRFI0|IRFL9|ITFA0|ITFC0|ITFF0|ITFI0|ITFL9|IXFA0|IXFC0|IXFF0|IXFI0|IXFL9|IYFA0|IYFC0|IYFF0|IYFI0|IYFL9|IZFA0|IZFC0|IZFF0|IZFI0|IZFL9|JBFA0|JBFC0|JBFF0|JBFI0|JBFL9|JFFA0|JFFC0|JFFF0|JFFI0|JFFL9|JNFA0|JNFC0|JNFF0|JNFI0|JNFL9|JPFA0|JPFC0|JPFF0|JPFI0|JPFL9|JSFA0|JSFC0|JSFF0|JSFI0|JSFL9|JWFA0|JWFC0|JWFF0|JWFI0|JWFL9|JZ1L9|JZFA0|JZFC0|JZFF0|JZFI0|JZFL9|KAFA0|KAFC0|KAFF0|KAFI0|KAFL9|KBFA0|KBFC0|KBFF0|KBFI0|KBFL9|KCFA0|KCFC0|KCFF0|KCFI0|KCFL9|KDFA0|KDFC0|KDFF0|KDFI0|KDFL9|KFFA0|KFFC0|KFFF0|KFFI0'
        Str_Product_Type = 'Future'
        Str_Quote_Type = 'I080'
        data = MicroQuote.MicroQuote_Set(Str_Product, Str_Product_Type, Str_Quote_Type, False)
        data_Last = data.get_last_data(Str_Product_Type, Str_Product, Str_Quote_Type)
        print("600個商品_{0}_{1} : {2}".format(Str_Product_Type, Str_Quote_Type, data_Last))
        endtime = datetime.datetime.now()
        print("執行時間(microseconds) : {0}".format((endtime - starttime).microseconds))
        data_Last_Null = [x for x in data_Last if x == ""]
        data_Last_notNull = [x for x in data_Last if x != ""]
        print("Receive Count : {0} , 無資料數量 : {1} , 有資料數量 : {2}".format(len(data_Last), len(data_Last_Null), len(data_Last_notNull)))"""
        """----------------------------------------------------------------------------------------------------"""


        #   訂閱商品
        """
        data = MicroQuote.MicroQuote_Set(Str_Product, Str_Product_Type, Str_Quote_Type, False)
        for i in data.quote_on_notify():
            print("及時報價 {0}_{1}_{2} : {3}".format(Str_Product, Str_Product_Type, Str_Quote_Type, i))"""

        #   取得一筆當前報價。可用符號 | 分隔取多商品。
        """
        data_Last = data.get_last_data(Str_Product_Type, Str_Product, Str_Quote_Type)
        print("{0}_{1}_{2} : {3}".format(Str_Product, Str_Product_Type, Str_Quote_Type, data_Last))"""

        #   可輸入起始以及 結束時間進行資料回補
        """
        for i in data.get_history_data('09:00:00', '10:00:00'):
            print("歷史資料回補 {0}_{1}_{2} : {3}".format(Str_Product, Str_Product_Type, Str_Quote_Type, i))"""

        #   訂閱交易商品後，進行資料回補並取得逐筆報價。True為回補最後一筆、 False為全回補，預設為 False
        """
        for i in data.recover_on_notify(False):
            print("回補並報價 {0}_{1}_{2} : {3}".format(Str_Product, Str_Product_Type, Str_Quote_Type, i))"""

        #   訂閱交易商品後，可取得該日商品列表
        """
        list_prod = data.get_list()
        print("該日商品列表數量{0}: {1}".format(Str_Product_Type, len(list_prod)))
        print("該日商品列表{0}: {1}".format(Str_Product_Type, list_prod))"""

        #   取得該日商品基本資料。可用逗號(,)分隔取多商品。
        """
        info_prod = data.get_product(Str_Product_Type, Str_Product)
        print("商品基本資料{0}: {1}".format(Str_Product, info_prod))"""

        #   取得該日商品盤後靜態資料。可用逗號(,)分隔取多商品。
        """
        data_Aft = data.get_after_hour(Str_Product_Type, Str_Product)
        print("商品盤後靜態資料{0}: {1}".format(Str_Product, data_Aft))"""

        #   取得盤中高低價。可用逗號(,)分隔取多商品。
        """
        data_OHL = data.get_OHL(Str_Product_Type, Str_Product)
        print("商品盤中高低價{0}: {1}".format(Str_Product, data_OHL))"""

        #   回傳伺服器時間
        """
        for i in data.heart_beat_server_time():
            print("伺服器時間 : {0}".format(i))"""

        #   訂閱股票指數，可搭配迴圈取得逐筆報價
        """
        for i in data.queue_on_taiex():
            print("指數 {0}_{1}_{2} : {3}".format(Str_Product, Str_Product_Type, Str_Quote_Type, i))"""

        #   訂閱盤中高低價 ，可搭配迴圈取得逐筆報價
        """
        for i in data.quote_on_OHL():
            print("盤中高低價 {0}_{1}_{2} : {3}".format(Str_Product, Str_Product_Type, Str_Quote_Type, i))"""

        #   取得帳務權限狀態
        """
        val_User_Permission = data.user_permission
        print("取得帳務權限狀態: {0}".format(val_User_Permission))"""

except Exception as ex:
    print("Error: {0}".format(ex))
